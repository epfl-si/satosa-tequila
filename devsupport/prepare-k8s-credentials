#!/bin/sh

# Extract things from your `$KUBECONFIG` of `~/.kube/config`, and lay
# them out into a directory like they would be in a Kubuernetes pod.
#
# Requires kubectl, jq and awk.

set -e

if [ "$#" != 1 ]; then
    cat >&2 <<USAGE
Usage: prepare-k8s-credentials <dir>

<dir> will be created if it doesn't already exist.
USAGE
    exit 1
fi

target="$1"

if [ ! -d "$target" ]; then mkdir "$target"; fi

current_context () {
    kubectl config current-context
}

jq_cluster () {
    local current_context cluster_name ca_data ca_file
    current_context="$(current_context)"

    cluster_name="$(kubectl config get-contexts "$current_context" --no-headers | awk '{ print $3 }')"
    kubectl config view --minify --raw -o json | \
        jq -r --arg cluster_name "$cluster_name" ".clusters[] | select(.name == \$cluster_name) $1"
}

jq_user () {
    local current_context cluster_name ca_data ca_file
    current_context="$(current_context)"

    user_name="$(kubectl config get-contexts "$current_context" --no-headers | awk '{ print $4 }')"
    kubectl config view --minify --raw -o json | \
        jq -r --arg user_name "$user_name" ".users[] | select(.name == \$user_name) $1"
}

###############################

ca_data="$(jq_cluster '| .cluster."certificate-authority-data"')"
if [ "$ca_data" = "null" ]; then
    ca_file="$(jq_cluster '| .cluster."certificate-authority"')"
    ca_data="$(cat "$ca_file")"
fi

echo "$ca_data" > "$target/ca.crt"


jq_user '| .user.token' > "$target/token"

echo "satosa-system" > "$target/namespace"
